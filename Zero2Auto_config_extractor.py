# This was my attempt at trying to extract the config from the custom sample from Zero2Auto
# I was able to decrypt the API calls and decrypt the 2nd stage executable but struggled extracting the URL and thrid stage URL



import pefile
from arc4 import ARC4



filePath = '/home/zach/Documents/main_bin.exe'
rot_cipher = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890./='

strings = [
        'F5gG8e514pbag5kg', '.5ea5/QPY4//', 'pe51g5Ceb35ffn', 'I9egh1/n//b3rk', 'E5fh=5G8e514', 'Je9g5Ceb35ffz5=bel',
        'I9egh1/n//b3', 'E514Ceb35ffz5=bel', 't5gG8e514pbag5kg', '.5ea5/QPY4//', 'F9m5b6E5fbhe35', 's9a4E5fbhe35n',
        'I9egh1/n//b3', 'yb3.E5fbhe35', 'yb14E5fbhe35'
    ]


#Function used to decrypted API hashes
def rot13_decrypt(cipher):
	return "".join([rot_cipher[(rot_cipher.index(c) +13) %len(rot_cipher)]for c in cipher])

# Function used to get encrypted resource section and decrypted it 
def stage1_cruloader(file):
	pe = pefile.PE(filePath)
	for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
		for resource_id in resource_type.directory.entries:
			pe = pe.get_data(resource_id.directory.entries[0].data.struct.OffsetToData, resource_id.directory.entries[0].data.struct.Size)

	return decrypt_resource(pe[0x0C:0x1B], pe[0x1C:])


# Function used for decrypting resource section RC4
def decrypt_resource(key, data):
	return ARC4(key).decrypt(data)




# Decrypt Strings
print('[1] Decrypt Strings\n')
for word in strings:
	print(f'{word} -> {rot13_decrypt(word)}')		 

# Getting resource section from executable
print('\n[2] Extracting data')

pe = pefile.PE(filePath)

decrypted_resource = stage1_cruloader(pe)

with open('stage2_decrypted.bin', 'wb') as f:
	f.write(decrypted_resource)

# Writing stage2 to file
print(f'\nWriting Stage2 -> stage2_decrypted.bin')

